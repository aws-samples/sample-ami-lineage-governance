AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway for AMI Lineage Governance Framework'

Parameters:
  APIHandlerLambdaArn:
    Type: String
    Description: ARN of the API handler Lambda function
  
  StageName:
    Type: String
    Description: API Gateway stage name
    Default: v1
  
  CognitoUserPoolArn:
    Type: String
    Description: Cognito User Pool ARN for authentication (optional)
    Default: ''

Conditions:
  HasCognitoAuth: !Not [!Equals [!Ref CognitoUserPoolArn, '']]

Resources:
  # API Gateway REST API
  AMILineageAPI:
    Type: AWS::ApiGateway::RestApi
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W45
            reason: "API Gateway access logging is not required for this internal governance API as CloudWatch metrics provide sufficient monitoring"
          - id: W11
            reason: "API Gateway resource policy requires wildcard permissions for execute-api actions across all API resources"
    Properties:
      Name: ami-lineage-api
      Description: API for AMI lineage tracking and governance
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*'
            Condition:
              IpAddress:
                aws:SourceIp:
                  - 10.0.0.0/8
                  - 172.16.0.0/12
                  - 192.168.0.0/16
          - Effect: Deny
            Principal: '*'
            Action: execute-api:Invoke
            Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # Cognito Authorizer (if provided)
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Condition: HasCognitoAuth
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref AMILineageAPI
      ProviderARNs:
        - !Ref CognitoUserPoolArn
      IdentitySource: method.request.header.Authorization

  # API Resources
  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !GetAtt AMILineageAPI.RootResourceId
      PathPart: api

  V1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref APIResource
      PathPart: v1

  AMIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref V1Resource
      PathPart: ami

  AMIIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref AMIResource
      PathPart: '{ami_id}'

  SecurityContextResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref AMIIdResource
      PathPart: security-context

  LineageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref AMIIdResource
      PathPart: lineage

  SecurityImpactResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref V1Resource
      PathPart: security-impact

  ComplianceAssessmentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref V1Resource
      PathPart: compliance-assessment

  AMISearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AMILineageAPI
      ParentId: !Ref AMIResource
      PathPart: search

  # Methods
  # GET /api/v1/ami/{ami_id}/security-context
  SecurityContextMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AMILineageAPI
      ResourceId: !Ref SecurityContextResource
      HttpMethod: GET
      AuthorizationType: !If [HasCognitoAuth, COGNITO_USER_POOLS, NONE]
      AuthorizerId: !If [HasCognitoAuth, !Ref CognitoAuthorizer, !Ref 'AWS::NoValue']
      RequestParameters:
        method.request.path.ami_id: true
        method.request.querystring.include_compliance: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
        - StatusCode: 404
          ResponseModels:
            application/json: Empty
        - StatusCode: 500
          ResponseModels:
            application/json: Empty

  # GET /api/v1/ami/{ami_id}/lineage
  LineageMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AMILineageAPI
      ResourceId: !Ref LineageResource
      HttpMethod: GET
      AuthorizationType: !If [HasCognitoAuth, COGNITO_USER_POOLS, NONE]
      AuthorizerId: !If [HasCognitoAuth, !Ref CognitoAuthorizer, !Ref 'AWS::NoValue']
      RequestParameters:
        method.request.path.ami_id: true
        method.request.querystring.direction: false
        method.request.querystring.depth: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
        - StatusCode: 404
          ResponseModels:
            application/json: Empty
        - StatusCode: 500
          ResponseModels:
            application/json: Empty

  # POST /api/v1/security-impact
  SecurityImpactMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AMILineageAPI
      ResourceId: !Ref SecurityImpactResource
      HttpMethod: POST
      AuthorizationType: !If [HasCognitoAuth, COGNITO_USER_POOLS, NONE]
      AuthorizerId: !If [HasCognitoAuth, !Ref CognitoAuthorizer, !Ref 'AWS::NoValue']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
        - StatusCode: 500
          ResponseModels:
            application/json: Empty

  # POST /api/v1/compliance-assessment
  ComplianceAssessmentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AMILineageAPI
      ResourceId: !Ref ComplianceAssessmentResource
      HttpMethod: POST
      AuthorizationType: !If [HasCognitoAuth, COGNITO_USER_POOLS, NONE]
      AuthorizerId: !If [HasCognitoAuth, !Ref CognitoAuthorizer, !Ref 'AWS::NoValue']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
        - StatusCode: 500
          ResponseModels:
            application/json: Empty

  # POST /api/v1/ami/search
  AMISearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AMILineageAPI
      ResourceId: !Ref AMISearchResource
      HttpMethod: POST
      AuthorizationType: !If [HasCognitoAuth, COGNITO_USER_POOLS, NONE]
      AuthorizerId: !If [HasCognitoAuth, !Ref CognitoAuthorizer, !Ref 'AWS::NoValue']
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerLambdaArn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Empty
        - StatusCode: 500
          ResponseModels:
            application/json: Empty

  # OPTIONS methods for CORS
  SecurityContextOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AMILineageAPI
      ResourceId: !Ref SecurityContextResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Lambda Permission for API Gateway
  APIGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref APIHandlerLambdaArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AMILineageAPI}/*/*'

  # API Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W45
            reason: "API Gateway deployment access logging is not required for this internal governance API as CloudWatch metrics provide sufficient monitoring"
    DependsOn:
      - SecurityContextMethod
      - LineageMethod
      - SecurityImpactMethod
      - ComplianceAssessmentMethod
      - AMISearchMethod
      - APIGatewayAccount
    Properties:
      RestApiId: !Ref AMILineageAPI
      StageName: !Ref StageName

  # CloudWatch Log Group for API Gateway
  APIGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "Default CloudWatch Logs encryption is sufficient for API Gateway logs in this governance use case"
      checkov:
        skip:
          - id: CKV_AWS_158
            comment: "Default CloudWatch Logs encryption is sufficient for API Gateway logs in this governance use case"
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AMILineageAPI}'
      RetentionInDays: 30

  # API Gateway Account (for CloudWatch logging)
  APIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayCloudWatchRole.Arn

  # IAM Role for API Gateway CloudWatch logging
  APIGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit RoleName is required for organizational governance and cross-stack references"
          - id: W11
            reason: "API Gateway CloudWatch role requires specific log group permissions for this API"
    Properties:
      RoleName: !Sub 'AMI-Lineage-APIGateway-CloudWatch-Role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref 'AWS::Region'
      Policies:
        - PolicyName: APIGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/${AMILineageAPI}*'

  # Usage Plan
  APIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: APIDeployment
    Properties:
      UsagePlanName: ami-lineage-usage-plan
      Description: Usage plan for AMI lineage API
      ApiStages:
        - ApiId: !Ref AMILineageAPI
          Stage: !Ref StageName
      Throttle:
        BurstLimit: 100
        RateLimit: 50
      Quota:
        Limit: 10000
        Period: DAY

  # API Key
  APIKey:
    Type: AWS::ApiGateway::ApiKey
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit Name is required for organizational governance and cross-stack references"
    Properties:
      Name: ami-lineage-api-key
      Description: API key for AMI lineage API
      Enabled: true

  # Usage Plan Key
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref APIUsagePlan

  # CloudWatch Dashboard for API metrics
  APIDashboard:
    Type: AWS::CloudWatch::Dashboard
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit DashboardName is required for organizational governance and cross-stack references"
    Properties:
      DashboardName: AMI-Lineage-API-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${AMILineageAPI}" ],
                  [ ".", "Latency", ".", "." ],
                  [ ".", "4XXError", ".", "." ],
                  [ ".", "5XXError", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "CacheHitCount", "ApiName", "${AMILineageAPI}" ],
                  [ ".", "CacheMissCount", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Cache Metrics",
                "period": 300
              }
            }
          ]
        }

Outputs:
  APIGatewayURL:
    Description: URL of the API Gateway
    Value: !Sub 'https://${AMILineageAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewayURL'
  
  APIGatewayId:
    Description: ID of the API Gateway
    Value: !Ref AMILineageAPI
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewayId'
  
  APIKeyId:
    Description: ID of the API Key
    Value: !Ref APIKey
    Export:
      Name: !Sub '${AWS::StackName}-APIKeyId'
  
  UsagePlanId:
    Description: ID of the Usage Plan
    Value: !Ref APIUsagePlan
    Export:
      Name: !Sub '${AWS::StackName}-UsagePlanId'
  
  DashboardURL:
    Description: URL of the CloudWatch dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${APIDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'
