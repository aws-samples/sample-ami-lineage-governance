AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simplified SNS topics and subscriptions for AMI lineage notifications'

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address for notifications
    Default: ''
  
  SlackWebhookURL:
    Type: String
    Description: Slack webhook URL for notifications (optional)
    Default: ''
    NoEcho: true
  
  KMSKeyId:
    Type: String
    Description: KMS Key ID for SNS encryption
    Default: alias/aws/sns

Conditions:
  HasEmail: !Not [!Equals [!Ref NotificationEmail, '']]
  HasSlack: !Not [!Equals [!Ref SlackWebhookURL, '']]

Resources:
  # SNS Topic for AMI Compliance Notifications
  AMIComplianceTopic:
    Type: AWS::SNS::Topic

    Metadata:

      cfn_nag:

        rules_to_suppress:

          - id: W28

            reason: "Explicit TopicName is required for organizational governance and cross-stack references"

    Properties:
      TopicName: !Sub '${AWS::StackName}-ami-compliance-notifications'
      DisplayName: AMI Compliance Notifications
      KmsMasterKeyId: !Ref KMSKeyId

  # SNS Topic for AMI Security Alerts
  AMISecurityTopic:
    Type: AWS::SNS::Topic

    Metadata:

      cfn_nag:

        rules_to_suppress:

          - id: W28

            reason: "Explicit TopicName is required for organizational governance and cross-stack references"

    Properties:
      TopicName: !Sub '${AWS::StackName}-ami-security-alerts'
      DisplayName: AMI Security Alerts
      KmsMasterKeyId: !Ref KMSKeyId

  # SNS Topic for System Errors
  AMISystemErrorsTopic:
    Type: AWS::SNS::Topic

    Metadata:

      cfn_nag:

        rules_to_suppress:

          - id: W28

            reason: "Explicit TopicName is required for organizational governance and cross-stack references"

    Properties:
      TopicName: !Sub '${AWS::StackName}-ami-system-errors'
      DisplayName: AMI System Errors
      KmsMasterKeyId: !Ref KMSKeyId

  # Email Subscription for Compliance Notifications
  ComplianceEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasEmail
    Properties:
      TopicArn: !Ref AMIComplianceTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # Email Subscription for Security Alerts
  SecurityEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasEmail
    Properties:
      TopicArn: !Ref AMISecurityTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # Email Subscription for System Errors
  ErrorEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasEmail
    Properties:
      TopicArn: !Ref AMISystemErrorsTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # Lambda Function for Slack Notifications
  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Condition: HasSlack
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit FunctionName is required for organizational governance and cross-stack references"
          - id: W89
            reason: "Slack notification function does not require VPC access as it only sends HTTP requests to external Slack webhook"
          - id: W92
            reason: "ReservedConcurrentExecutions not required for low-volume Slack notification function"
      checkov:
        skip:
          - id: CKV_AWS_117
            comment: "Slack notification function does not require VPC access as it only sends HTTP requests to external Slack webhook"
          - id: CKV_AWS_173
            comment: "Lambda environment variable contains webhook URL which is encrypted at rest by AWS"
          - id: CKV_AWS_116
            comment: "DLQ not required for Slack notification function as failures are acceptable for non-critical notifications"
          - id: CKV_AWS_115
            comment: "ReservedConcurrencyLimit is already configured for this function"
    Properties:
      FunctionName: !Sub '${AWS::StackName}-slack-notifications'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SlackLambdaRole.Arn
      ReservedConcurrencyLimit: 5
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookURL
      Code:
        ZipFile: |
          import json
          import urllib3
          import os
          
          def lambda_handler(event, context):
              webhook_url = os.environ['SLACK_WEBHOOK_URL']
              
              for record in event['Records']:
                  message = json.loads(record['Sns']['Message'])
                  subject = record['Sns']['Subject']
                  
                  slack_message = {
                      "text": f"*{subject}*",
                      "attachments": [
                          {
                              "color": "warning" if "compliance" in subject.lower() else "danger",
                              "fields": [
                                  {
                                      "title": "Details",
                                      "value": json.dumps(message, indent=2),
                                      "short": False
                                  }
                              ]
                          }
                      ]
                  }
                  
                  http = urllib3.PoolManager()
                  response = http.request(
                      'POST',
                      webhook_url,
                      body=json.dumps(slack_message),
                      headers={'Content-Type': 'application/json'}
                  )
              
              return {'statusCode': 200}

  # SNS Subscription for Slack Notifications
  SlackComplianceSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlack
    Properties:
      TopicArn: !Ref AMIComplianceTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  SlackSecuritySubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlack
    Properties:
      TopicArn: !Ref AMISecurityTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  SlackErrorSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlack
    Properties:
      TopicArn: !Ref AMISystemErrorsTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  # Lambda Permission for SNS
  SlackLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSlack
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AMIComplianceTopic

  SlackLambdaPermissionSecurity:
    Type: AWS::Lambda::Permission
    Condition: HasSlack
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AMISecurityTopic

  SlackLambdaPermissionError:
    Type: AWS::Lambda::Permission
    Condition: HasSlack
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AMISystemErrorsTopic

  # IAM Role for Slack Lambda Function
  SlackLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasSlack
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit RoleName is required for organizational governance and cross-stack references"
    Properties:
      RoleName: !Sub '${AWS::StackName}-Slack-Lambda-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # CloudWatch Alarms for SNS Topics
  ComplianceTopicAlarm:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit AlarmName is required for organizational governance and cross-stack references"
    Properties:
      AlarmName: !Sub '${AWS::StackName}-Compliance-Topic-Failures'
      AlarmDescription: Alarm for AMI compliance topic delivery failures
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TopicName
          Value: !GetAtt AMIComplianceTopic.TopicName
      AlarmActions:
        - !Ref AMISystemErrorsTopic

  SecurityTopicAlarm:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit AlarmName is required for organizational governance and cross-stack references"
    Properties:
      AlarmName: !Sub '${AWS::StackName}-Security-Topic-Failures'
      AlarmDescription: Alarm for AMI security topic delivery failures
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TopicName
          Value: !GetAtt AMISecurityTopic.TopicName
      AlarmActions:
        - !Ref AMISystemErrorsTopic

Outputs:
  ComplianceTopicArn:
    Description: ARN of the AMI compliance SNS topic
    Value: !Ref AMIComplianceTopic
    Export:
      Name: !Sub '${AWS::StackName}-ComplianceTopicArn'
  
  SecurityTopicArn:
    Description: ARN of the AMI security SNS topic
    Value: !Ref AMISecurityTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityTopicArn'
  
  ErrorTopicArn:
    Description: ARN of the AMI system errors SNS topic
    Value: !Ref AMISystemErrorsTopic
    Export:
      Name: !Sub '${AWS::StackName}-ErrorTopicArn'
  
  SlackFunctionArn:
    Description: ARN of the Slack notification Lambda function
    Condition: HasSlack
    Value: !GetAtt SlackNotificationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SlackFunctionArn'
