AWSTemplateFormatVersion: '2010-09-09'
Description: 'SNS topics and subscriptions for AMI lineage notifications'

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address for notifications
    Default: ''
  
  SlackWebhookURL:
    Type: String
    Description: Slack webhook URL for notifications (optional)
    Default: ''
    NoEcho: true
  
  KMSKeyId:
    Type: String
    Description: KMS Key ID for SNS encryption
    Default: alias/aws/sns

Conditions:
  HasEmail: !Not [!Equals [!Ref NotificationEmail, '']]
  HasSlack: !Not [!Equals [!Ref SlackWebhookURL, '']]

Resources:
  # SNS Topic for AMI Compliance Notifications
  AMIComplianceTopic:
    Type: AWS::SNS::Topic

    Metadata:

      cfn_nag:

        rules_to_suppress:

          - id: W28

            reason: "Explicit TopicName is required for organizational governance and cross-stack references"

    Properties:
      TopicName: ami-compliance-notifications
      DisplayName: AMI Compliance Notifications
      KmsMasterKeyId: !Ref KMSKeyId
      DeliveryStatusLogging:
        - Protocol: lambda
          SuccessFeedbackRoleArn: !GetAtt SNSLoggingRole.Arn
          FailureFeedbackRoleArn: !GetAtt SNSLoggingRole.Arn
          SuccessFeedbackSampleRate: 100

  # SNS Topic for AMI Security Alerts
  AMISecurityTopic:
    Type: AWS::SNS::Topic

    Metadata:

      cfn_nag:

        rules_to_suppress:

          - id: W28

            reason: "Explicit TopicName is required for organizational governance and cross-stack references"

    Properties:
      TopicName: ami-security-alerts
      DisplayName: AMI Security Alerts
      KmsMasterKeyId: !Ref KMSKeyId
      DeliveryStatusLogging:
        - Protocol: lambda
          SuccessFeedbackRoleArn: !GetAtt SNSLoggingRole.Arn
          FailureFeedbackRoleArn: !GetAtt SNSLoggingRole.Arn
          SuccessFeedbackSampleRate: 100

  # SNS Topic for System Errors
  AMISystemErrorsTopic:
    Type: AWS::SNS::Topic

    Metadata:

      cfn_nag:

        rules_to_suppress:

          - id: W28

            reason: "Explicit TopicName is required for organizational governance and cross-stack references"

    Properties:
      TopicName: ami-system-errors
      DisplayName: AMI System Errors
      KmsMasterKeyId: !Ref KMSKeyId

  # Email Subscription for Compliance Notifications
  ComplianceEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasEmail
    Properties:
      TopicArn: !Ref AMIComplianceTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail
      FilterPolicy:
        severity:
          - MEDIUM
          - HIGH
          - CRITICAL

  # Email Subscription for Security Alerts
  SecurityEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasEmail
    Properties:
      TopicArn: !Ref AMISecurityTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # Email Subscription for System Errors
  ErrorEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasEmail
    Properties:
      TopicArn: !Ref AMISystemErrorsTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # Dead Letter Queue for Slack Lambda
  SlackLambdaDLQ:
    Type: AWS::SQS::Queue
    Condition: HasSlack
    Properties:
      QueueName: ami-slack-notifications-dlq
      MessageRetentionPeriod: 1209600  # 14 days
      KmsMasterKeyId: !Ref KMSKeyId
      Tags:
        - Key: Name
          Value: AMI-Slack-Notifications-DLQ
        - Key: Purpose
          Value: AMI-Lineage-Slack-DLQ

  # Lambda Function for Slack Notifications
  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Condition: HasSlack
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit FunctionName is required for organizational governance and cross-stack references"
          - id: W89
            reason: "Slack notification function does not require VPC access as it only sends HTTP requests to external Slack webhook"
          - id: W92
            reason: "ReservedConcurrentExecutions not required for low-volume Slack notification function"
      checkov:
        skip:
          - id: CKV_AWS_117
            comment: "Slack notification function does not require VPC access as it only sends HTTP requests to external Slack webhook"
          - id: CKV_AWS_173
            comment: "Lambda environment variable contains webhook URL which is encrypted at rest by AWS"
          - id: CKV_AWS_115
            comment: "ReservedConcurrencyLimit is already configured for this function"
    Properties:
      FunctionName: ami-slack-notifications
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SlackLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      ReservedConcurrencyLimit: 5
      DeadLetterConfig:
        TargetArn: !GetAtt SlackLambdaDLQ.Arn
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookURL
      Code:
        ZipFile: |
          import json
          import urllib3
          import os
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              try:
                  webhook_url = os.environ['SLACK_WEBHOOK_URL']
                  
                  for record in event['Records']:
                      message = json.loads(record['Sns']['Message'])
                      subject = record['Sns']['Subject']
                      
                      slack_message = {
                          "text": f"*{subject}*",
                          "attachments": [
                              {
                                  "color": "warning" if "compliance" in subject.lower() else "danger",
                                  "fields": [
                                      {
                                          "title": "Details",
                                          "value": json.dumps(message, indent=2),
                                          "short": False
                                      }
                                  ]
                              }
                          ]
                      }
                      
                      http = urllib3.PoolManager()
                      response = http.request(
                          'POST',
                          webhook_url,
                          body=json.dumps(slack_message),
                          headers={'Content-Type': 'application/json'},
                          timeout=10
                      )
                      
                      if response.status != 200:
                          logger.error(f"Slack notification failed with status {response.status}")
                          raise Exception(f"Slack API returned status {response.status}")
                  
                  return {'statusCode': 200}
              except Exception as e:
                  logger.error(f"Error sending Slack notification: {str(e)}")
                  raise

  # SNS Subscription for Slack Notifications
  SlackComplianceSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlack
    Properties:
      TopicArn: !Ref AMIComplianceTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  SlackSecuritySubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlack
    Properties:
      TopicArn: !Ref AMISecurityTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  SlackErrorSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlack
    Properties:
      TopicArn: !Ref AMISystemErrorsTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  # Lambda Permission for SNS
  SlackLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSlack
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AMIComplianceTopic

  SlackLambdaPermissionSecurity:
    Type: AWS::Lambda::Permission
    Condition: HasSlack
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AMISecurityTopic

  SlackLambdaPermissionError:
    Type: AWS::Lambda::Permission
    Condition: HasSlack
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AMISystemErrorsTopic

  # IAM Role for Slack Lambda Function
  SlackLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasSlack
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit RoleName is required for organizational governance and cross-stack references"
    Properties:
      RoleName: AMI-Lineage-Slack-Lambda-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref 'AWS::Region'
      Policies:
        - PolicyName: SlackLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ami-slack-notifications*'
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: !GetAtt SlackLambdaDLQ.Arn

  # IAM Role for SNS Logging
  SNSLoggingRole:
    Type: AWS::IAM::Role

    Metadata:

      cfn_nag:

        rules_to_suppress:

          - id: W28

            reason: "Explicit RoleName is required for organizational governance and cross-stack references"

    Properties:
      RoleName: AMI-Lineage-SNS-Logging-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref 'AWS::Region'
      Policies:
        - PolicyName: SNSLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                  - logs:PutRetentionPolicy
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sns/ami-*'

  # CloudWatch Alarms for SNS Topics
  ComplianceTopicAlarm:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit AlarmName is required for organizational governance and cross-stack references"
    Properties:
      AlarmName: AMI-Compliance-Topic-Failures
      AlarmDescription: Alarm for AMI compliance topic delivery failures
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TopicName
          Value: !GetAtt AMIComplianceTopic.TopicName
      AlarmActions:
        - !Ref AMISystemErrorsTopic

  SecurityTopicAlarm:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit AlarmName is required for organizational governance and cross-stack references"
    Properties:
      AlarmName: AMI-Security-Topic-Failures
      AlarmDescription: Alarm for AMI security topic delivery failures
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TopicName
          Value: !GetAtt AMISecurityTopic.TopicName
      AlarmActions:
        - !Ref AMISystemErrorsTopic

  # SNS Topic Policies
  AMIComplianceTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AMIComplianceTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - sns:Publish
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:AddPermission
              - sns:RemovePermission
              - sns:DeleteTopic
            Resource: !Ref AMIComplianceTopic
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref AMIComplianceTopic

  AMISecurityTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AMISecurityTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - sns:Publish
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:AddPermission
              - sns:RemovePermission
              - sns:DeleteTopic
            Resource: !Ref AMISecurityTopic
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
                - securityhub.amazonaws.com
            Action: sns:Publish
            Resource: !Ref AMISecurityTopic

  # CloudWatch Dashboard for SNS Metrics
  SNSDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: AMI-Lineage-SNS-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SNS", "NumberOfMessagesPublished", "TopicName", "${AMIComplianceTopic.TopicName}" ],
                  [ ".", ".", ".", "${AMISecurityTopic.TopicName}" ],
                  [ ".", ".", ".", "${AMISystemErrorsTopic.TopicName}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "SNS Messages Published",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SNS", "NumberOfNotificationsDelivered", "TopicName", "${AMIComplianceTopic.TopicName}" ],
                  [ ".", "NumberOfNotificationsFailed", ".", "." ],
                  [ ".", "NumberOfNotificationsDelivered", ".", "${AMISecurityTopic.TopicName}" ],
                  [ ".", "NumberOfNotificationsFailed", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "SNS Delivery Status",
                "period": 300
              }
            }
          ]
        }

Outputs:
  ComplianceTopicArn:
    Description: ARN of the AMI compliance SNS topic
    Value: !Ref AMIComplianceTopic
    Export:
      Name: !Sub '${AWS::StackName}-ComplianceTopicArn'
  
  SecurityTopicArn:
    Description: ARN of the AMI security SNS topic
    Value: !Ref AMISecurityTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityTopicArn'
  
  ErrorTopicArn:
    Description: ARN of the AMI system errors SNS topic
    Value: !Ref AMISystemErrorsTopic
    Export:
      Name: !Sub '${AWS::StackName}-ErrorTopicArn'
  
  SlackFunctionArn:
    Description: ARN of the Slack notification Lambda function
    Condition: HasSlack
    Value: !GetAtt SlackNotificationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SlackFunctionArn'
  
  DashboardURL:
    Description: URL of the CloudWatch dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${SNSDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'
