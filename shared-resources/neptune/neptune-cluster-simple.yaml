AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simplified Neptune Graph Database for AMI Lineage Tracking'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where Neptune cluster will be deployed
  
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of private subnet IDs for Neptune cluster
  
  BackupRetentionPeriod:
    Type: Number
    Description: Number of days to retain automated backups
    Default: 7
    MinValue: 1
    MaxValue: 35
  
  InstanceClass:
    Type: String
    Description: Neptune instance class
    Default: db.r5.large
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge

Resources:
  # Neptune Subnet Group
  NeptuneSubnetGroup:
    Type: AWS::Neptune::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${AWS::StackName}-neptune-subnet-group'
      DBSubnetGroupDescription: Subnet group for AMI lineage Neptune cluster
      SubnetIds: !Ref PrivateSubnetIds
      Tags:
        - Key: Name
          Value: AMI-Lineage-Neptune-SubnetGroup

  # Security Group for Neptune
  NeptuneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W9
            reason: "Neptune requires broad CIDR access from private networks (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) for multi-AZ and cross-account Lambda access"
          - id: W5
            reason: "Neptune security group requires outbound access for AWS API calls and DNS resolution within VPC"
    Properties:
      GroupDescription: Security group for AMI lineage Neptune cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          CidrIp: 10.0.0.0/8
          Description: Allow access from private networks
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          CidrIp: 172.16.0.0/12
          Description: Allow access from private networks
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          CidrIp: 192.168.0.0/16
          Description: Allow access from private networks
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
          Description: HTTPS for AWS API calls within VPC
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.16.0.0/12
          Description: HTTPS for AWS API calls within VPC
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 192.168.0.0/16
          Description: HTTPS for AWS API calls within VPC
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.0/8
          Description: DNS resolution TCP
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.0/8
          Description: DNS resolution UDP
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 172.16.0.0/12
          Description: DNS resolution TCP
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 172.16.0.0/12
          Description: DNS resolution UDP
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 192.168.0.0/16
          Description: DNS resolution TCP
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 192.168.0.0/16
          Description: DNS resolution UDP
      Tags:
        - Key: Name
          Value: AMI-Lineage-Neptune-SecurityGroup

  # Security Group for Lambda functions
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "Lambda functions require outbound HTTPS access (0.0.0.0/0) for AWS API calls and internet-based services"
    Properties:
      GroupDescription: Security group for AMI lineage Lambda functions
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          CidrIp: 10.0.0.0/8
          Description: Allow access to Neptune cluster
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          CidrIp: 172.16.0.0/12
          Description: Allow access to Neptune cluster
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          CidrIp: 192.168.0.0/16
          Description: Allow access to Neptune cluster
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS outbound for AWS API calls
      Tags:
        - Key: Name
          Value: AMI-Lineage-Lambda-SecurityGroup

  # Security Group Rule to allow Lambda access to Neptune
  LambdaToNeptuneRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NeptuneSecurityGroup
      IpProtocol: tcp
      FromPort: 8182
      ToPort: 8182
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: Allow Lambda functions to access Neptune

  # Neptune Cluster (using default parameter groups)
  NeptuneCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${AWS::StackName}-neptune-cluster'
      DBSubnetGroupName: !Ref NeptuneSubnetGroup
      VpcSecurityGroupIds:
        - !Ref NeptuneSecurityGroup
      StorageEncrypted: true
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      PreferredBackupWindow: 03:00-04:00
      PreferredMaintenanceWindow: sun:04:00-sun:05:00
      DeletionProtection: false
      EnableCloudwatchLogsExports:
        - audit
      Tags:
        - Key: Name
          Value: AMI-Lineage-Neptune-Cluster
        - Key: Purpose
          Value: AMI-Lineage-Tracking

  # Primary Neptune Instance
  NeptunePrimaryInstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-neptune-primary'
      DBClusterIdentifier: !Ref NeptuneCluster
      DBInstanceClass: !Ref InstanceClass
      Tags:
        - Key: Name
          Value: AMI-Lineage-Neptune-Primary
        - Key: Purpose
          Value: AMI-Lineage-Tracking

  # CloudWatch Log Group for Neptune audit logs
  NeptuneLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "Default CloudWatch Logs encryption is sufficient for Neptune audit logs in this governance use case"
      checkov:
        skip:
          - id: CKV_AWS_158
            comment: "Default CloudWatch Logs encryption is sufficient for Neptune audit logs in this governance use case"
    Properties:
      LogGroupName: !Sub '/aws/neptune/${AWS::StackName}-cluster/audit'
      RetentionInDays: 30

Outputs:
  NeptuneClusterEndpoint:
    Description: Neptune cluster endpoint
    Value: !GetAtt NeptuneCluster.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-ClusterEndpoint'
  
  NeptuneReaderEndpoint:
    Description: Neptune cluster reader endpoint
    Value: !GetAtt NeptuneCluster.ReadEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-ReaderEndpoint'
  
  NeptunePort:
    Description: Neptune cluster port
    Value: !GetAtt NeptuneCluster.Port
    Export:
      Name: !Sub '${AWS::StackName}-Port'
  
  NeptuneSecurityGroupId:
    Description: Security group ID for Neptune cluster
    Value: !Ref NeptuneSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'
  
  LambdaSecurityGroupId:
    Description: Security group ID for Lambda functions
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-LambdaSecurityGroupId'
  
  NeptuneClusterArn:
    Description: Neptune cluster ARN
    Value: !Sub 'arn:aws:neptune-db:${AWS::Region}:${AWS::AccountId}:cluster/${NeptuneCluster}'
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'
