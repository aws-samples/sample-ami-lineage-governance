AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security Hub integration for AMI lineage governance'

Parameters:
  SecurityHubRegion:
    Type: String
    Description: AWS region where Security Hub is enabled
    Default: !Ref 'AWS::Region'
  
  FindingFormat:
    Type: String
    Description: Security Hub finding format
    Default: AWS_SECURITY_FINDING_FORMAT
    AllowedValues:
      - AWS_SECURITY_FINDING_FORMAT
      - ASFF

Resources:
  # Custom Security Hub Product
  SecurityHubProduct:
    Type: AWS::SecurityHub::Product
    Properties:
      ProductName: AMI Lineage Governance
      ProductDescription: Custom product for AMI lineage and compliance findings
      CompanyName: !Ref 'AWS::AccountId'
      ProductArn: !Sub 'arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:product/${AWS::AccountId}/ami-lineage-governance'

  # Security Hub Insights
  AMIComplianceInsight:
    Type: AWS::SecurityHub::Insight
    Properties:
      Name: AMI Compliance Overview
      Description: Overview of AMI compliance status across the organization
      Filters:
        ProductName:
          - Value: AMI Lineage Governance
            Comparison: EQUALS
        Type:
          - Value: Sensitive Data Identifications/Compliance
            Comparison: EQUALS
      GroupByAttribute: ComplianceStatus

  AMISecurityInsight:
    Type: AWS::SecurityHub::Insight
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit Name is required for organizational governance and cross-stack references"
    Properties:
      Name: AMI Security Findings
      Description: Security findings related to AMI vulnerabilities and threats
      Filters:
        ProductName:
          - Value: AMI Lineage Governance
            Comparison: EQUALS
        Type:
          - Value: Sensitive Data Identifications/PII
            Comparison: EQUALS
      GroupByAttribute: SeverityLabel

  AMILineageInsight:
    Type: AWS::SecurityHub::Insight
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit Name is required for organizational governance and cross-stack references"
    Properties:
      Name: AMI Lineage Issues
      Description: Issues related to AMI lineage tracking and verification
      Filters:
        ProductName:
          - Value: AMI Lineage Governance
            Comparison: EQUALS
        Title:
          - Value: lineage
            Comparison: CONTAINS
      GroupByAttribute: ResourceType

  # Custom Actions for Security Hub
  AMIApprovalAction:
    Type: AWS::SecurityHub::CustomAction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit Name is required for organizational governance and cross-stack references"
    Properties:
      Name: Approve AMI
      Description: Mark AMI as approved for use
      Id: ami-approve-action

  AMIQuarantineAction:
    Type: AWS::SecurityHub::CustomAction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit Name is required for organizational governance and cross-stack references"
    Properties:
      Name: Quarantine AMI
      Description: Quarantine AMI and prevent its use
      Id: ami-quarantine-action

  AMILineageAnalysisAction:
    Type: AWS::SecurityHub::CustomAction
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit Name is required for organizational governance and cross-stack references"
    Properties:
      Name: Analyze AMI Lineage
      Description: Perform detailed lineage analysis for the AMI
      Id: ami-lineage-analysis-action

  # EventBridge Rule for Security Hub Custom Actions
  SecurityHubActionRule:
    Type: AWS::Events::Rule
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit Name is required for organizational governance and cross-stack references"
    Properties:
      Name: ami-security-hub-actions
      Description: Process Security Hub custom actions for AMI governance
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Custom Action
        detail:
          actionName:
            - Approve AMI
            - Quarantine AMI
            - Analyze AMI Lineage
      State: ENABLED
      Targets:
        - Arn: !GetAtt SecurityHubActionProcessor.Arn
          Id: SecurityHubActionTarget

  # Lambda Function to Process Security Hub Actions
  SecurityHubActionProcessor:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit FunctionName is required for organizational governance and cross-stack references"
          - id: W89
            reason: "Security Hub action processor does not require VPC access as it only processes events and calls AWS APIs"
          - id: W92
            reason: "ReservedConcurrentExecutions not required for event-driven Security Hub processing function"
    Properties:
      FunctionName: ami-security-hub-action-processor
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SecurityHubActionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          NEPTUNE_ENDPOINT: !Ref NeptuneEndpoint
          SNS_TOPIC_ARN: !Ref SNSTopicArn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          
          ec2_client = boto3.client('ec2')
          sns_client = boto3.client('sns')
          securityhub_client = boto3.client('securityhub')
          
          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              detail = event['detail']
              action_name = detail['actionName']
              finding_id = detail['findingId']
              
              # Extract AMI ID from finding
              ami_id = extract_ami_id_from_finding(finding_id)
              
              if action_name == 'Approve AMI':
                  handle_ami_approval(ami_id, finding_id)
              elif action_name == 'Quarantine AMI':
                  handle_ami_quarantine(ami_id, finding_id)
              elif action_name == 'Analyze AMI Lineage':
                  handle_lineage_analysis(ami_id, finding_id)
              
              return {'statusCode': 200}
          
          def extract_ami_id_from_finding(finding_id):
              # Extract AMI ID from finding ID or resource ARN
              if 'ami-' in finding_id:
                  start = finding_id.find('ami-')
                  return finding_id[start:start+21]  # AMI ID length
              return None
          
          def handle_ami_approval(ami_id, finding_id):
              if not ami_id:
                  return
              
              try:
                  # Tag AMI as approved
                  ec2_client.create_tags(
                      Resources=[ami_id],
                      Tags=[
                          {'Key': 'Approval', 'Value': 'Approved'},
                          {'Key': 'ApprovalDate', 'Value': datetime.utcnow().isoformat()},
                          {'Key': 'ApprovalMethod', 'Value': 'SecurityHub'}
                      ]
                  )
                  
                  # Update Security Hub finding
                  update_finding_status(finding_id, 'RESOLVED', 'AMI approved via Security Hub action')
                  
                  # Send notification
                  send_notification(f'AMI {ami_id} has been approved', 'AMI_APPROVED')
                  
              except Exception as e:
                  print(f"Error approving AMI: {str(e)}")
          
          def handle_ami_quarantine(ami_id, finding_id):
              if not ami_id:
                  return
              
              try:
                  # Tag AMI as quarantined
                  ec2_client.create_tags(
                      Resources=[ami_id],
                      Tags=[
                          {'Key': 'Status', 'Value': 'Quarantined'},
                          {'Key': 'QuarantineDate', 'Value': datetime.utcnow().isoformat()},
                          {'Key': 'QuarantineReason', 'Value': 'Security Hub Action'}
                      ]
                  )
                  
                  # Update Security Hub finding
                  update_finding_status(finding_id, 'NEW', 'AMI quarantined - requires investigation')
                  
                  # Send notification
                  send_notification(f'AMI {ami_id} has been quarantined', 'AMI_QUARANTINED')
                  
              except Exception as e:
                  print(f"Error quarantining AMI: {str(e)}")
          
          def handle_lineage_analysis(ami_id, finding_id):
              if not ami_id:
                  return
              
              try:
                  # Trigger detailed lineage analysis
                  # This would call the API handler or directly query Neptune
                  
                  # Update Security Hub finding
                  update_finding_status(finding_id, 'NOTIFIED', 'Lineage analysis initiated')
                  
                  # Send notification
                  send_notification(f'Lineage analysis initiated for AMI {ami_id}', 'LINEAGE_ANALYSIS')
                  
              except Exception as e:
                  print(f"Error analyzing lineage: {str(e)}")
          
          def update_finding_status(finding_id, status, note):
              try:
                  securityhub_client.batch_update_findings(
                      FindingIdentifiers=[
                          {'Id': finding_id, 'ProductArn': os.environ.get('PRODUCT_ARN')}
                      ],
                      Workflow={'Status': status},
                      Note={'Text': note, 'UpdatedBy': 'AMI-Lineage-Governance'}
                  )
              except Exception as e:
                  print(f"Error updating finding: {str(e)}")
          
          def send_notification(message, event_type):
              try:
                  sns_client.publish(
                      TopicArn=os.environ['SNS_TOPIC_ARN'],
                      Subject=f'AMI Governance Action: {event_type}',
                      Message=json.dumps({
                          'message': message,
                          'event_type': event_type,
                          'timestamp': datetime.utcnow().isoformat()
                      })
                  )
              except Exception as e:
                  print(f"Error sending notification: {str(e)}")

  # IAM Role for Security Hub Action Processor
  SecurityHubActionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit RoleName is required for organizational governance and cross-stack references"
          - id: W11
            reason: "EC2 describe and tag operations require wildcard permissions for cross-account AMI governance, Security Hub operations require wildcard permissions for cross-account finding management"
    Properties:
      RoleName: AMI-Lineage-SecurityHub-Action-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecurityHubActionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeImages
                  - ec2:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - securityhub:BatchUpdateFindings
                  - securityhub:GetFindings
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopicArn

  # Lambda Permission for EventBridge
  SecurityHubActionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SecurityHubActionProcessor
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SecurityHubActionRule.Arn

  # CloudWatch Dashboard for Security Hub Metrics
  SecurityHubDashboard:
    Type: AWS::CloudWatch::Dashboard
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit DashboardName is required for organizational governance and cross-stack references"
    Properties:
      DashboardName: AMI-Lineage-SecurityHub-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SecurityHub", "Findings", "CompanyName", "${AWS::AccountId}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Security Hub Findings",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${SecurityHubActionProcessor}'\n| fields @timestamp, @message\n| filter @message like /AMI/\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "Recent AMI Actions",
                "view": "table"
              }
            }
          ]
        }

  # CloudWatch Alarms for Security Hub
  HighSeverityFindingsAlarm:
    Type: AWS::CloudWatch::Alarm
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit AlarmName is required for organizational governance and cross-stack references"
    Properties:
      AlarmName: AMI-HighSeverity-SecurityHub-Findings
      AlarmDescription: Alarm for high severity AMI findings in Security Hub
      MetricName: Findings
      Namespace: AWS/SecurityHub
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: CompanyName
          Value: !Ref 'AWS::AccountId'
      AlarmActions:
        - !Ref SNSTopicArn

Parameters:
  NeptuneEndpoint:
    Type: String
    Description: Neptune cluster endpoint
    Default: ''
  
  SNSTopicArn:
    Type: String
    Description: SNS topic ARN for notifications
    Default: ''

Outputs:
  SecurityHubProductArn:
    Description: ARN of the Security Hub product
    Value: !Ref SecurityHubProduct
    Export:
      Name: !Sub '${AWS::StackName}-ProductArn'
  
  ComplianceInsightArn:
    Description: ARN of the compliance insight
    Value: !Ref AMIComplianceInsight
    Export:
      Name: !Sub '${AWS::StackName}-ComplianceInsightArn'
  
  SecurityInsightArn:
    Description: ARN of the security insight
    Value: !Ref AMISecurityInsight
    Export:
      Name: !Sub '${AWS::StackName}-SecurityInsightArn'
  
  LineageInsightArn:
    Description: ARN of the lineage insight
    Value: !Ref AMILineageInsight
    Export:
      Name: !Sub '${AWS::StackName}-LineageInsightArn'
  
  ActionProcessorArn:
    Description: ARN of the Security Hub action processor Lambda
    Value: !GetAtt SecurityHubActionProcessor.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ActionProcessorArn'
  
  DashboardURL:
    Description: URL of the CloudWatch dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${SecurityHubDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'
